package com.fdilke.varsymm

import com.fdilke.varsymm.GroupMatcher.beAGroupOf
import org.scalatest.FunSpec
import org.scalatest.Matchers._

class CyclicGroupTest extends FunSpec {
  describe("The cyclic group") {
    it("makes sense only for a positive number of elements") {
      intercept[IllegalArgumentException] {
        CyclicGroup(0)
      }
      intercept[IllegalArgumentException] {
        CyclicGroup(-1)
      }
    }

    it("has the right number of elements, and are groups") {
      val group6 = CyclicGroup(6)
      group6 should beAGroupOf[Int]
      group6.order shouldBe 6
    }

    it("is indeed generated by its alleged generator") {
      val group8 = CyclicGroup(8)
      group8.generateSubgroup(
        group8.generator
      ) shouldBe
        group8.wholeGroup
    }
  }
}
